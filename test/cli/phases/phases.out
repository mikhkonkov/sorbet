--- parse-tree start ---
Integer {
  val = "1"
}
--- parse-tree end ---
--- parse-tree-json start ---
{
  "type" : "Integer",
  "val" : "1"
}
--- parse-tree-json end ---
--- ast start ---
class <emptyTree><<C <root>>> < ()
  1
end
--- ast end ---
--- ast-raw start ---
ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    Literal{ value = 1 }
  ]
}
--- ast-raw end ---
--- dsl-tree start ---
class <emptyTree><<C <root>>> < ()
  1
end
--- dsl-tree end ---
--- dsl-tree-raw start ---
ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    Literal{ value = 1 }
  ]
}
--- dsl-tree-raw end ---
--- index-tree start ---
class <emptyTree><<C <root>>> < ()
  1
end
--- index-tree end ---
--- index-tree-raw start ---
ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    Literal{ value = 1 }
  ]
}
--- index-tree-raw end ---
--- symbol-table start ---
class ::<root> < ::Object () @ (... removed core rbi locs ..., -e:1, https://github.com/sorbet/sorbet/tree/master/bazel-out/host/genfiles/rbi/procs.rbi#L1)
  class ::<Class:<root>>[<AttachedClass>] < ::<Class:Object> ()
    method ::<Class:<root>>#<static-init> (<blk>) @ -e:1
      argument <blk><block> @ Loc {file=-e start=??? end=???}

--- symbol-table end ---
--- symbol-table-raw start ---
class <C <U <root>>> < <C <U Object>> () @ (... removed core rbi locs ..., Loc {file=-e start=1:1 end=1:2}, Loc {file=https://github.com/sorbet/sorbet/tree/master/bazel-out/host/genfiles/rbi/procs.rbi start=1:1 end=252:4})
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1><N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=-e start=1:1 end=1:2}
      argument <blk><block> @ Loc {file=-e start=??? end=???}

--- symbol-table-raw end ---
--- name-tree start ---
class <emptyTree><<C <root>>> < ()
  1
end
--- name-tree end ---
--- name-tree-raw start ---
ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    Literal{ value = 1 }
  ]
}
--- name-tree-raw end ---
--- resolve-tree start ---
class <emptyTree><<C <root>>> < ()
  1
end
--- resolve-tree end ---
--- resolve-tree-raw start ---
ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    Literal{ value = 1 }
  ]
}
--- resolve-tree-raw end ---
--- cfg start ---
digraph "-e" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<returnMethodTemp>$2: Integer(1) = 1\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(1)\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

--- cfg end ---
--- cfg-raw start ---
digraph "-e" {
  graph [fontname = "Courier"];
  node [fontname = "Courier"];
  edge [fontname = "Courier"];
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = box];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\lBinding {\l&nbsp;bind = VariableUseSite {\l&nbsp;&nbsp;variable = <U <self>>,\l&nbsp;&nbsp;type = T.class_of(<root>),\l&nbsp;},\l&nbsp;value = Cast {\l&nbsp;&nbsp;cast = T.cast,\l&nbsp;&nbsp;value = VariableUseSite {\l&nbsp;&nbsp;&nbsp;variable = <U <self>>,\l&nbsp;&nbsp;&nbsp;type = NilClass,\l&nbsp;&nbsp;},\l&nbsp;&nbsp;type = T.class_of(<root>),\l&nbsp;},\l}\lBinding {\l&nbsp;bind = VariableUseSite {\l&nbsp;&nbsp;variable = <U <returnMethodTemp>>$2,\l&nbsp;&nbsp;type = Integer(1),\l&nbsp;},\l&nbsp;value = Literal { value = Integer(1) },\l}\lBinding {\l&nbsp;bind = VariableUseSite {\l&nbsp;&nbsp;variable = <U <finalReturn>>,\l&nbsp;&nbsp;type = T.noreturn,\l&nbsp;},\l&nbsp;value = Return {\l&nbsp;&nbsp;what = VariableUseSite {\l&nbsp;&nbsp;&nbsp;variable = <U <returnMethodTemp>>$2,\l&nbsp;&nbsp;&nbsp;type = Integer(1),\l&nbsp;&nbsp;},\l&nbsp;},\l}\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

--- cfg-raw end ---
--- cfg-json start ---
--- cfg-json end ---
--- checking diff ---
--- checking crashes ---
--- checking crashes end ---
