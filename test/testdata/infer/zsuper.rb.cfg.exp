digraph "zsuper.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(Foo) = alias <C Foo>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(Foo))\l<statTemp>$9: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$10: T.class_of(Bar) = alias <C Bar>\l<statTemp>$8: Sorbet::Private::Static::Void = <statTemp>$9: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$10: T.class_of(Bar))\l<statTemp>$12: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: T.class_of(Foo) = alias <C Foo>\l<statTemp>$11: Sorbet::Private::Static::Void = <statTemp>$12: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$13: T.class_of(Foo))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Foo#baz" {
    label = "::Foo#baz";
    color = blue;
    "bb::Foo#baz_0" [shape = invhouse];
    "bb::Foo#baz_1" [shape = parallelogram];

    "bb::Foo#baz_0" [
        label = "block[id=0]()\l<self>: Foo = cast(<self>: NilClass, Foo);\la: T.untyped = load_arg(a)\l<returnMethodTemp>$2: NilClass = <self>: Foo.puts(a: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Foo#baz_0" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Foo#baz_1" -> "bb::Foo#baz_1" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [
        label = "block[id=0]()\l<self>: Bar = cast(<self>: NilClass, Bar);\lb: T.untyped = load_arg(b)\l<blk>: T.untyped = load_arg(<blk>)\l<block-pre-call-temp>$6: Sorbet::Private::Static::Void = <self>: Bar.super(b: T.untyped, <blk>: T.untyped)\l<selfRestore>$7: Bar = <self>\l<unconditional>\l"
    ];

    "bb::Bar#baz_0" -> "bb::Bar#baz_2" [style="bold"];
    "bb::Bar#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_2" [
        label = "block[id=2](<self>: Bar, <selfRestore>$7: Bar)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Bar#baz_2" -> "bb::Bar#baz_5" [style="bold"];
    "bb::Bar#baz_2" -> "bb::Bar#baz_3" [style="tapered"];

    "bb::Bar#baz_3" [
        label = "block[id=3](<selfRestore>$7: Bar)\l<returnMethodTemp>$2: T.untyped = Solve<super>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Bar#baz_3" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_5" [
        label = "block[id=5](<self>: Bar, <selfRestore>$7: Bar)\louterLoops: 1\l<self>: Bar = loadSelf\l<blk>$8: T.untyped = load_yield_params(super)\l<blk>$9: Integer(0) = 0\la$1: T.untyped = <blk>$8: T.untyped.[](<blk>$9: Integer(0))\l<blockReturnTemp>$10: NilClass = <self>: Bar.puts(a$1: T.untyped)\l<blockReturnTemp>$13: T.noreturn = blockreturn<super> <blockReturnTemp>$10: NilClass\l<unconditional>\l"
    ];

    "bb::Bar#baz_5" -> "bb::Bar#baz_2" [style="bold"];
}

}

