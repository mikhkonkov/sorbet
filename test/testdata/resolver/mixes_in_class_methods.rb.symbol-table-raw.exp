class <C <U <root>>> < <C <U Object>> () @ (... removed core rbi locs ..., Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=2:1 end=51:4}, Loc {file=https://github.com/sorbet/sorbet/tree/master/bazel-out/host/genfiles/rbi/procs.rbi start=1:1 end=252:4})
  class <S <C <U <root>>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> ()
    method <S <C <U <root>>> $1><N <U <static-init>> $CENSORED> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=2:1 end=51:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  module <C <U Bad1>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=24:1 end=24:12}
  class <S <C <U Bad1>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=24:8 end=24:12}
    type-member(+) <S <C <U Bad1>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Bad1>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad1) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=24:8 end=24:12}
    method <S <C <U Bad1>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=24:1 end=27:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  class <C <U Bad2>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=29:1 end=29:11}
    module <C <U Bad2>><C <U ClassMethods>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=31:3 end=31:22}
    class <C <U Bad2>><S <C <U ClassMethods>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=31:10 end=31:22}
      type-member(+) <C <U Bad2>><S <C <U ClassMethods>> $1><C <U <AttachedClass>>> -> LambdaParam(<C <U Bad2>><S <C <U ClassMethods>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad2::ClassMethods) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=31:10 end=31:22}
      method <C <U Bad2>><S <C <U ClassMethods>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=31:3 end=31:27}
        argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  class <S <C <U Bad2>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=29:7 end=29:11}
    type-member(+) <S <C <U Bad2>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Bad2>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad2) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=29:7 end=29:11}
    method <S <C <U Bad2>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=29:1 end=33:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  module <C <U Bad3>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=35:1 end=35:12}
    class <C <U Bad3>><C <U ClassMethods>> < <C <U Object>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=38:3 end=38:21}
    class <C <U Bad3>><S <C <U ClassMethods>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=38:9 end=38:21}
      type-member(+) <C <U Bad3>><S <C <U ClassMethods>> $1><C <U <AttachedClass>>> -> LambdaParam(<C <U Bad3>><S <C <U ClassMethods>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad3::ClassMethods) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=38:9 end=38:21}
      method <C <U Bad3>><S <C <U ClassMethods>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=38:3 end=38:26}
        argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  class <S <C <U Bad3>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=35:8 end=35:12}
    type-member(+) <S <C <U Bad3>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Bad3>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad3) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=35:8 end=35:12}
    method <S <C <U Bad3>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=35:1 end=40:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  module <C <U Bad4>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=42:1 end=42:12}
  class <S <C <U Bad4>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=42:8 end=42:12}
    type-member(+) <S <C <U Bad4>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Bad4>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad4) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=42:8 end=42:12}
    method <S <C <U Bad4>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=42:1 end=46:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  module <C <U Bad5>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=48:1 end=48:12}
  class <S <C <U Bad5>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=48:8 end=48:12}
    type-member(+) <S <C <U Bad5>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Bad5>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Bad5) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=48:8 end=48:12}
    method <S <C <U Bad5>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=48:1 end=51:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  module <C <U Mixin>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=2:1 end=2:13}
    module <C <U Mixin>><C <U ClassMethods>> < <C <U Sorbet>><C <U Private>><C <U Static>><C <U ImplicitModuleSuperclass>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=5:3 end=5:22}
      method <C <U Mixin>><C <U ClassMethods>><U mixin_class_method> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=6:5 end=6:27}
        argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
    class <C <U Mixin>><S <C <U ClassMethods>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> () @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=5:10 end=5:22}
      type-member(+) <C <U Mixin>><S <C <U ClassMethods>> $1><C <U <AttachedClass>>> -> LambdaParam(<C <U Mixin>><S <C <U ClassMethods>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Mixin::ClassMethods) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=5:10 end=5:22}
      method <C <U Mixin>><S <C <U ClassMethods>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=5:3 end=8:6}
        argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
    method <C <U Mixin>><U mixin_method> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=12:3 end=12:19}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  class <S <C <U Mixin>> $1>[<C <U <AttachedClass>>>] < <C <U Module>> (<C <U Sig>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=2:8 end=2:13}
    type-member(+) <S <C <U Mixin>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Mixin>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Mixin) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=2:8 end=2:13}
    method <S <C <U Mixin>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=2:1 end=14:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}
  class <C <U Test>> < <C <U Object>> (<C <U Mixin>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=16:1 end=16:11}
  class <S <C <U Test>> $1>[<C <U <AttachedClass>>>] < <S <C <U Object>> $1> (<C <U ClassMethods>>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=16:7 end=16:11}
    type-member(+) <S <C <U Test>> $1><C <U <AttachedClass>>> -> LambdaParam(<S <C <U Test>> $1><C <U <AttachedClass>>>, lower=T.noreturn, upper=Test) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=16:7 end=16:11}
    method <S <C <U Test>> $1><U <static-init>> (<blk>) @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=16:1 end=18:4}
      argument <blk><block> @ Loc {file=test/testdata/resolver/mixes_in_class_methods.rb start=??? end=???}

