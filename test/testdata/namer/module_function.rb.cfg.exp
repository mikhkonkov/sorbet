digraph "module_function.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(Funcs))\l<statTemp>$9: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$10: T.class_of(C) = alias <C C>\l<statTemp>$8: Sorbet::Private::Static::Void = <statTemp>$9: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$10: T.class_of(C))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Funcs#f" {
    label = "::Funcs#f";
    color = blue;
    "bb::Funcs#f_0" [shape = invhouse];
    "bb::Funcs#f_1" [shape = parallelogram];

    "bb::Funcs#f_0" [
        label = "block[id=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\lx: Integer = load_arg(x)\l<returnMethodTemp>$2: Integer = x\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::Funcs#f_0" -> "bb::Funcs#f_1" [style="bold"];
    "bb::Funcs#f_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#f_1" -> "bb::Funcs#f_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#f" {
    label = "::<Class:Funcs>#f";
    color = blue;
    "bb::<Class:Funcs>#f_0" [shape = invhouse];
    "bb::<Class:Funcs>#f_1" [shape = parallelogram];

    "bb::<Class:Funcs>#f_0" [
        label = "block[id=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#f_0" -> "bb::<Class:Funcs>#f_1" [style="bold"];
    "bb::<Class:Funcs>#f_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#f_1" -> "bb::<Class:Funcs>#f_1" [style="bold"];
}

subgraph "cluster_::Funcs#g" {
    label = "::Funcs#g";
    color = blue;
    "bb::Funcs#g_0" [shape = invhouse];
    "bb::Funcs#g_1" [shape = parallelogram];

    "bb::Funcs#g_0" [
        label = "block[id=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\ls: Symbol = load_arg(s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::Funcs#g_0" -> "bb::Funcs#g_1" [style="bold"];
    "bb::Funcs#g_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#g_1" -> "bb::Funcs#g_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#g" {
    label = "::<Class:Funcs>#g";
    color = blue;
    "bb::<Class:Funcs>#g_0" [shape = invhouse];
    "bb::<Class:Funcs>#g_1" [shape = parallelogram];

    "bb::<Class:Funcs>#g_0" [
        label = "block[id=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\ls: Symbol = load_arg(s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#g_0" -> "bb::<Class:Funcs>#g_1" [style="bold"];
    "bb::<Class:Funcs>#g_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#g_1" -> "bb::<Class:Funcs>#g_1" [style="bold"];
}

subgraph "cluster_::Funcs#h" {
    label = "::Funcs#h";
    color = blue;
    "bb::Funcs#h_0" [shape = invhouse];
    "bb::Funcs#h_1" [shape = parallelogram];

    "bb::Funcs#h_0" [
        label = "block[id=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\ls: String = load_arg(s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::Funcs#h_0" -> "bb::Funcs#h_1" [style="bold"];
    "bb::Funcs#h_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#h_1" -> "bb::Funcs#h_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#h" {
    label = "::<Class:Funcs>#h";
    color = blue;
    "bb::<Class:Funcs>#h_0" [shape = invhouse];
    "bb::<Class:Funcs>#h_1" [shape = parallelogram];

    "bb::<Class:Funcs>#h_0" [
        label = "block[id=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\ls: String = load_arg(s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#h_0" -> "bb::<Class:Funcs>#h_1" [style="bold"];
    "bb::<Class:Funcs>#h_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#h_1" -> "bb::<Class:Funcs>#h_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#<static-init>" {
    label = "::<Class:Funcs>#<static-init>";
    color = blue;
    "bb::<Class:Funcs>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Funcs>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Funcs>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$6: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_0" -> "bb::<Class:Funcs>#<static-init>_2" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_1" -> "bb::<Class:Funcs>#<static-init>_1" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_2" [
        label = "block[id=2](<self>: T.class_of(Funcs), <selfRestore>$6: T.class_of(Funcs))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_2" -> "bb::<Class:Funcs>#<static-init>_5" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_2" -> "bb::<Class:Funcs>#<static-init>_3" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_3" [
        label = "block[id=3](<selfRestore>$6: T.class_of(Funcs))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<sig>\l<self>: T.class_of(Funcs) = <selfRestore>$6\l<statTemp>$20: Symbol(:\"f\") = :\"f\"\l<statTemp>$18: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$20: Symbol(:\"f\"))\l<block-pre-call-temp>$23: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$24: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_3" -> "bb::<Class:Funcs>#<static-init>_6" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_5" [
        label = "block[id=5](<self>: T.class_of(Funcs), <selfRestore>$6: T.class_of(Funcs))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$13: Symbol(:\"x\") = :\"x\"\l<hashTemp>$14: T.class_of(Integer) = alias <C Integer>\l<magic>$15: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$12: {x: T.class_of(Integer)} = <magic>$15: T.class_of(<Magic>).<build-hash>(<hashTemp>$13: Symbol(:\"x\"), <hashTemp>$14: T.class_of(Integer))\l<statTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$12: {x: T.class_of(Integer)})\l<statTemp>$16: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <statTemp>$10: T::Private::Methods::DeclBuilder.returns(<statTemp>$16: T.class_of(Integer))\l<blockReturnTemp>$17: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_5" -> "bb::<Class:Funcs>#<static-init>_2" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_6" [
        label = "block[id=6](<self>: T.class_of(Funcs), <selfRestore>$24: T.class_of(Funcs))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_6" -> "bb::<Class:Funcs>#<static-init>_9" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_6" -> "bb::<Class:Funcs>#<static-init>_7" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_7" [
        label = "block[id=7](<selfRestore>$24: T.class_of(Funcs))\l<statTemp>$21: Sorbet::Private::Static::Void = Solve<sig>\l<self>: T.class_of(Funcs) = <selfRestore>$24\l<block-pre-call-temp>$38: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$39: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_7" -> "bb::<Class:Funcs>#<static-init>_10" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_9" [
        label = "block[id=9](<self>: T.class_of(Funcs), <selfRestore>$24: T.class_of(Funcs))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$31: Symbol(:\"s\") = :\"s\"\l<hashTemp>$32: T.class_of(Symbol) = alias <C Symbol>\l<magic>$33: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$30: {s: T.class_of(Symbol)} = <magic>$33: T.class_of(<Magic>).<build-hash>(<hashTemp>$31: Symbol(:\"s\"), <hashTemp>$32: T.class_of(Symbol))\l<statTemp>$28: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$30: {s: T.class_of(Symbol)})\l<statTemp>$34: T.class_of(Symbol) = alias <C Symbol>\l<blockReturnTemp>$27: T::Private::Methods::DeclBuilder = <statTemp>$28: T::Private::Methods::DeclBuilder.returns(<statTemp>$34: T.class_of(Symbol))\l<blockReturnTemp>$35: T.noreturn = blockreturn<sig> <blockReturnTemp>$27: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_9" -> "bb::<Class:Funcs>#<static-init>_6" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_10" [
        label = "block[id=10](<self>: T.class_of(Funcs), <selfRestore>$39: T.class_of(Funcs))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_10" -> "bb::<Class:Funcs>#<static-init>_13" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_10" -> "bb::<Class:Funcs>#<static-init>_11" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_11" [
        label = "block[id=11](<selfRestore>$39: T.class_of(Funcs))\l<statTemp>$36: Sorbet::Private::Static::Void = Solve<sig>\l<self>: T.class_of(Funcs) = <selfRestore>$39\l<block-pre-call-temp>$53: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$54: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_11" -> "bb::<Class:Funcs>#<static-init>_14" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_13" [
        label = "block[id=13](<self>: T.class_of(Funcs), <selfRestore>$39: T.class_of(Funcs))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$46: Symbol(:\"s\") = :\"s\"\l<hashTemp>$47: T.class_of(Symbol) = alias <C Symbol>\l<magic>$48: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$45: {s: T.class_of(Symbol)} = <magic>$48: T.class_of(<Magic>).<build-hash>(<hashTemp>$46: Symbol(:\"s\"), <hashTemp>$47: T.class_of(Symbol))\l<statTemp>$43: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$45: {s: T.class_of(Symbol)})\l<statTemp>$49: T.class_of(Symbol) = alias <C Symbol>\l<blockReturnTemp>$42: T::Private::Methods::DeclBuilder = <statTemp>$43: T::Private::Methods::DeclBuilder.returns(<statTemp>$49: T.class_of(Symbol))\l<blockReturnTemp>$50: T.noreturn = blockreturn<sig> <blockReturnTemp>$42: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_13" -> "bb::<Class:Funcs>#<static-init>_10" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_14" [
        label = "block[id=14](<self>: T.class_of(Funcs), <selfRestore>$54: T.class_of(Funcs))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_14" -> "bb::<Class:Funcs>#<static-init>_17" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_14" -> "bb::<Class:Funcs>#<static-init>_15" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_15" [
        label = "block[id=15](<selfRestore>$54: T.class_of(Funcs))\l<statTemp>$51: Sorbet::Private::Static::Void = Solve<sig>\l<self>: T.class_of(Funcs) = <selfRestore>$54\l<block-pre-call-temp>$68: Sorbet::Private::Static::Void = <self>: T.class_of(Funcs).sig()\l<selfRestore>$69: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_15" -> "bb::<Class:Funcs>#<static-init>_18" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_17" [
        label = "block[id=17](<self>: T.class_of(Funcs), <selfRestore>$54: T.class_of(Funcs))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$61: Symbol(:\"s\") = :\"s\"\l<hashTemp>$62: T.class_of(String) = alias <C String>\l<magic>$63: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$60: {s: T.class_of(String)} = <magic>$63: T.class_of(<Magic>).<build-hash>(<hashTemp>$61: Symbol(:\"s\"), <hashTemp>$62: T.class_of(String))\l<statTemp>$58: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$60: {s: T.class_of(String)})\l<statTemp>$64: T.class_of(String) = alias <C String>\l<blockReturnTemp>$57: T::Private::Methods::DeclBuilder = <statTemp>$58: T::Private::Methods::DeclBuilder.returns(<statTemp>$64: T.class_of(String))\l<blockReturnTemp>$65: T.noreturn = blockreturn<sig> <blockReturnTemp>$57: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_17" -> "bb::<Class:Funcs>#<static-init>_14" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_18" [
        label = "block[id=18](<self>: T.class_of(Funcs), <selfRestore>$69: T.class_of(Funcs))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_18" -> "bb::<Class:Funcs>#<static-init>_21" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_18" -> "bb::<Class:Funcs>#<static-init>_19" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_19" [
        label = "block[id=19](<selfRestore>$69: T.class_of(Funcs))\l<statTemp>$66: Sorbet::Private::Static::Void = Solve<sig>\l<statTemp>$82: T.class_of(Sorbet::Private::Static) = alias <C Static>\lkeep_for_ide$84: T.class_of(T) = alias <C T>\l<statTemp>$83: T.class_of(T::Sig) = alias <C Sig>\l<statTemp>$81: Sorbet::Private::Static::Void = <statTemp>$82: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$83: T.class_of(T::Sig))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_19" -> "bb::<Class:Funcs>#<static-init>_1" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_21" [
        label = "block[id=21](<self>: T.class_of(Funcs), <selfRestore>$69: T.class_of(Funcs))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$76: Symbol(:\"s\") = :\"s\"\l<hashTemp>$77: T.class_of(String) = alias <C String>\l<magic>$78: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$75: {s: T.class_of(String)} = <magic>$78: T.class_of(<Magic>).<build-hash>(<hashTemp>$76: Symbol(:\"s\"), <hashTemp>$77: T.class_of(String))\l<statTemp>$73: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$75: {s: T.class_of(String)})\l<statTemp>$79: T.class_of(String) = alias <C String>\l<blockReturnTemp>$72: T::Private::Methods::DeclBuilder = <statTemp>$73: T::Private::Methods::DeclBuilder.returns(<statTemp>$79: T.class_of(String))\l<blockReturnTemp>$80: T.noreturn = blockreturn<sig> <blockReturnTemp>$72: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_21" -> "bb::<Class:Funcs>#<static-init>_18" [style="bold"];
}

subgraph "cluster_::C#test_calls" {
    label = "::C#test_calls";
    color = blue;
    "bb::C#test_calls_0" [shape = invhouse];
    "bb::C#test_calls_1" [shape = parallelogram];

    "bb::C#test_calls_0" [
        label = "block[id=0]()\l<self>: C = cast(<self>: NilClass, C);\l<statTemp>$5: Integer(0) = 0\l<statTemp>$3: Integer = <self>: C.f(<statTemp>$5: Integer(0))\l<statTemp>$7: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$8: Integer(0) = 0\l<statTemp>$6: T.untyped = <statTemp>$7: T.class_of(Funcs).f(<statTemp>$8: Integer(0))\l<statTemp>$11: Symbol(:\"f\") = :\"f\"\l<statTemp>$9: Symbol = <self>: C.g(<statTemp>$11: Symbol(:\"f\"))\l<statTemp>$13: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$14: Symbol(:\"f\") = :\"f\"\l<statTemp>$12: Symbol = <statTemp>$13: T.class_of(Funcs).g(<statTemp>$14: Symbol(:\"f\"))\l<statTemp>$17: String(\"hello\") = \"hello\"\l<statTemp>$15: String = <self>: C.h(<statTemp>$17: String(\"hello\"))\l<statTemp>$19: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$20: String(\"world\") = \"world\"\l<statTemp>$18: String = <statTemp>$19: T.class_of(Funcs).h(<statTemp>$20: String(\"world\"))\l<statTemp>$21: T.class_of(C) = alias <C C>\l<returnMethodTemp>$2: T.untyped = <statTemp>$21: T.class_of(C).f()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::C#test_calls_0" -> "bb::C#test_calls_1" [style="bold"];
    "bb::C#test_calls_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::C#test_calls_1" -> "bb::C#test_calls_1" [style="bold"];
}

subgraph "cluster_::<Class:C>#<static-init>" {
    label = "::<Class:C>#<static-init>";
    color = blue;
    "bb::<Class:C>#<static-init>_0" [shape = invhouse];
    "bb::<Class:C>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:C>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(C) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U C>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U C>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$3: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$4: T.class_of(Funcs) = alias <C Funcs>\l<returnMethodTemp>$2: Sorbet::Private::Static::Void = <statTemp>$3: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$4: T.class_of(Funcs))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Sorbet::Private::Static::Void\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_0" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
    "bb::<Class:C>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_1" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
}

}

