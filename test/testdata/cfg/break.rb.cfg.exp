digraph "break.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<arrayTemp>$5: Integer(1) = 1\l<arrayTemp>$6: Integer(2) = 2\l<magic>$7: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$4: [Integer(1), Integer(2)] = <magic>$7: T.class_of(<Magic>).<build-array>(<arrayTemp>$5: Integer(1), <arrayTemp>$6: Integer(2))\l<block-pre-call-temp>$8: Sorbet::Private::Static::Void = <statTemp>$4: [Integer(1), Integer(2)].map()\l<selfRestore>$9: Object = <self>\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2](<self>: Object, <selfRestore>$9: Object)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3](<selfRestore>$9: Object)\ltarget: T::Array[T.noreturn] = Solve<map>\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4](<selfRestore>$9: Object, target: T.any(T::Array[T.noreturn], Integer))\l<statTemp>$17: T.class_of(T) = alias <C T>\l<returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer) = <statTemp>$17: T.class_of(T).reveal_type(target: T.any(T::Array[T.noreturn], Integer))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.any(T::Array[T.noreturn], Integer)\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_5" [
        label = "block[id=5](<self>: Object, <selfRestore>$9: Object)\louterLoops: 1\l<self>: Object = loadSelf\l<blk>$10: [Integer] = load_yield_params(map)\l<blk>$11: Integer(0) = 0\lx$1: Integer = <blk>$10: [Integer].[](<blk>$11: Integer(0))\l<block-break-assign>$16: Integer = x$1\ltarget: Integer = <block-break-assign>$16\l<unconditional>\l"
    ];

    "bb::Object#foo_5" -> "bb::Object#foo_4" [style="bold"];
}

subgraph "cluster_::Object#bar" {
    label = "::Object#bar";
    color = blue;
    "bb::Object#bar_0" [shape = invhouse];
    "bb::Object#bar_1" [shape = parallelogram];

    "bb::Object#bar_0" [
        label = "block[id=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<returnMethodTemp>$2: String(\"foo bar\") = \"foo bar\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String(\"foo bar\")\l<unconditional>\l"
    ];

    "bb::Object#bar_0" -> "bb::Object#bar_1" [style="bold"];
    "bb::Object#bar_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#bar_1" -> "bb::Object#bar_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.untyped = <self>: T.class_of(<root>).foo()\l<statTemp>$3: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$5: T.untyped)\l<block-pre-call-temp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).sig()\l<selfRestore>$10: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_2" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_2" [
        label = "block[id=2](<self>: T.class_of(<root>), <selfRestore>$10: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_2" -> "bb::<Class:<root>>#<static-init>_5" [style="bold"];
    "bb::<Class:<root>>#<static-init>_2" -> "bb::<Class:<root>>#<static-init>_3" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_3" [
        label = "block[id=3](<selfRestore>$10: T.class_of(<root>))\l<statTemp>$7: Sorbet::Private::Static::Void = Solve<sig>\l<self>: T.class_of(<root>) = <selfRestore>$10\l<block-pre-call-temp>$32: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()\l<selfRestore>$33: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_3" -> "bb::<Class:<root>>#<static-init>_6" [style="bold"];
    "bb::<Class:<root>>#<static-init>_5" [
        label = "block[id=5](<self>: T.class_of(<root>), <selfRestore>$10: T.class_of(<root>))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$17: Symbol(:\"blk\") = :\"blk\"\l<statTemp>$21: T.class_of(T) = alias <C T>\l<statTemp>$20: T.class_of(<DeclBuilderForProcs>) = <statTemp>$21: T.class_of(T).proc()\l<hashTemp>$23: Symbol(:\"x\") = :\"x\"\l<hashTemp>$24: T.class_of(Integer) = alias <C Integer>\l<magic>$25: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$22: {x: T.class_of(Integer)} = <magic>$25: T.class_of(<Magic>).<build-hash>(<hashTemp>$23: Symbol(:\"x\"), <hashTemp>$24: T.class_of(Integer))\l<statTemp>$19: T.class_of(<DeclBuilderForProcs>) = <statTemp>$20: T.class_of(<DeclBuilderForProcs>).params(<statTemp>$22: {x: T.class_of(Integer)})\l<statTemp>$26: T.class_of(String) = alias <C String>\l<hashTemp>$18: T.class_of(<DeclBuilderForProcs>) = <statTemp>$19: T.class_of(<DeclBuilderForProcs>).returns(<statTemp>$26: T.class_of(String))\l<magic>$27: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$16: {blk: T.class_of(<DeclBuilderForProcs>)} = <magic>$27: T.class_of(<Magic>).<build-hash>(<hashTemp>$17: Symbol(:\"blk\"), <hashTemp>$18: T.class_of(<DeclBuilderForProcs>))\l<statTemp>$14: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$16: {blk: T.class_of(<DeclBuilderForProcs>)})\l<statTemp>$28: T.class_of(String) = alias <C String>\l<blockReturnTemp>$13: T::Private::Methods::DeclBuilder = <statTemp>$14: T::Private::Methods::DeclBuilder.returns(<statTemp>$28: T.class_of(String))\l<blockReturnTemp>$29: T.noreturn = blockreturn<sig> <blockReturnTemp>$13: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_5" -> "bb::<Class:<root>>#<static-init>_2" [style="bold"];
    "bb::<Class:<root>>#<static-init>_6" [
        label = "block[id=6](<self>: T.class_of(<root>), <selfRestore>$33: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_6" -> "bb::<Class:<root>>#<static-init>_9" [style="bold"];
    "bb::<Class:<root>>#<static-init>_6" -> "bb::<Class:<root>>#<static-init>_7" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_7" [
        label = "block[id=7](<selfRestore>$33: T.class_of(<root>))\la: String = Solve<bar>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_7" -> "bb::<Class:<root>>#<static-init>_8" [style="bold"];
    "bb::<Class:<root>>#<static-init>_8" [
        label = "block[id=8](<selfRestore>$33: T.class_of(<root>), a: T.any(String, Integer))\l<self>: T.class_of(<root>) = <selfRestore>$33\l<statTemp>$45: T.class_of(T) = alias <C T>\l<statTemp>$44: T.any(String, Integer) = <statTemp>$45: T.class_of(T).reveal_type(a: T.any(String, Integer))\l<block-pre-call-temp>$49: Sorbet::Private::Static::Void = <self>: T.class_of(<root>).bar()\l<selfRestore>$50: T.class_of(<root>) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_8" -> "bb::<Class:<root>>#<static-init>_12" [style="bold"];
    "bb::<Class:<root>>#<static-init>_9" [
        label = "block[id=9](<self>: T.class_of(<root>), <selfRestore>$33: T.class_of(<root>))\louterLoops: 1\l<self>: T.class_of(<root>) = loadSelf\l<blk>$34: [Integer] = load_yield_params(bar)\l<blk>$35: Integer(0) = 0\lx$2: Integer = <blk>$34: [Integer].[](<blk>$35: Integer(0))\l<statTemp>$40: Integer(5) = 5\l<ifTemp>$38: T::Boolean = x$2: Integer.>(<statTemp>$40: Integer(5))\l<ifTemp>$38: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_9" -> "bb::<Class:<root>>#<static-init>_10" [style="bold"];
    "bb::<Class:<root>>#<static-init>_9" -> "bb::<Class:<root>>#<static-init>_11" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_10" [
        label = "block[id=10](<selfRestore>$33: T.class_of(<root>))\louterLoops: 1\l<returnTemp>$41: Integer(10) = 10\l<block-break-assign>$42: Integer(10) = <returnTemp>$41\la: Integer(10) = <block-break-assign>$42\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_10" -> "bb::<Class:<root>>#<static-init>_8" [style="bold"];
    "bb::<Class:<root>>#<static-init>_11" [
        label = "block[id=11](<self>: T.class_of(<root>), <selfRestore>$33: T.class_of(<root>))\louterLoops: 1\l<blockReturnTemp>$36: String(\"test\") = \"test\"\l<blockReturnTemp>$43: T.noreturn = blockreturn<bar> <blockReturnTemp>$36: String(\"test\")\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_11" -> "bb::<Class:<root>>#<static-init>_6" [style="bold"];
    "bb::<Class:<root>>#<static-init>_12" [
        label = "block[id=12](<self>: T.class_of(<root>), <selfRestore>$50: T.class_of(<root>))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:<root>>#<static-init>_12" -> "bb::<Class:<root>>#<static-init>_15" [style="bold"];
    "bb::<Class:<root>>#<static-init>_12" -> "bb::<Class:<root>>#<static-init>_13" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_13" [
        label = "block[id=13](<selfRestore>$50: T.class_of(<root>))\lb: String = Solve<bar>\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_13" -> "bb::<Class:<root>>#<static-init>_14" [style="bold"];
    "bb::<Class:<root>>#<static-init>_14" [
        label = "block[id=14](<selfRestore>$50: T.class_of(<root>), b: T.nilable(String))\l<statTemp>$62: T.class_of(T) = alias <C T>\l<statTemp>$61: T.nilable(String) = <statTemp>$62: T.class_of(T).reveal_type(b: T.nilable(String))\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_14" -> "bb::<Class:<root>>#<static-init>_18" [style="bold"];
    "bb::<Class:<root>>#<static-init>_15" [
        label = "block[id=15](<self>: T.class_of(<root>), <selfRestore>$50: T.class_of(<root>))\louterLoops: 1\l<self>: T.class_of(<root>) = loadSelf\l<blk>$51: [Integer] = load_yield_params(bar)\l<blk>$52: Integer(0) = 0\lx$3: Integer = <blk>$51: [Integer].[](<blk>$52: Integer(0))\l<statTemp>$57: Integer(5) = 5\l<ifTemp>$55: T::Boolean = x$3: Integer.>(<statTemp>$57: Integer(5))\l<ifTemp>$55: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_15" -> "bb::<Class:<root>>#<static-init>_16" [style="bold"];
    "bb::<Class:<root>>#<static-init>_15" -> "bb::<Class:<root>>#<static-init>_17" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_16" [
        label = "block[id=16](<selfRestore>$50: T.class_of(<root>))\louterLoops: 1\l<block-break-assign>$59: NilClass = <returnTemp>$58\lb: NilClass = <block-break-assign>$59\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_16" -> "bb::<Class:<root>>#<static-init>_14" [style="bold"];
    "bb::<Class:<root>>#<static-init>_17" [
        label = "block[id=17](<self>: T.class_of(<root>), <selfRestore>$50: T.class_of(<root>))\louterLoops: 1\l<blockReturnTemp>$53: String(\"test\") = \"test\"\l<blockReturnTemp>$60: T.noreturn = blockreturn<bar> <blockReturnTemp>$53: String(\"test\")\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_17" -> "bb::<Class:<root>>#<static-init>_12" [style="bold"];
    "bb::<Class:<root>>#<static-init>_18" [
        label = "block[id=18]()\louterLoops: 1\l<statTemp>$67: Integer(1) = 1\l<statTemp>$66: String = <statTemp>$67: Integer(1).to_s()\l<statTemp>$68: String(\"\") = \"\"\l<whileTemp>$65: T::Boolean = <statTemp>$66: String.==(<statTemp>$68: String(\"\"))\l<whileTemp>$65: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_18" -> "bb::<Class:<root>>#<static-init>_21" [style="bold"];
    "bb::<Class:<root>>#<static-init>_18" -> "bb::<Class:<root>>#<static-init>_19" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_19" [
        label = "block[id=19]()\lc: NilClass = nil\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_19" -> "bb::<Class:<root>>#<static-init>_20" [style="bold"];
    "bb::<Class:<root>>#<static-init>_20" [
        label = "block[id=20](c: T.nilable(Symbol))\l<statTemp>$77: T.class_of(T) = alias <C T>\l<statTemp>$76: T.nilable(Symbol) = <statTemp>$77: T.class_of(T).reveal_type(c: T.nilable(Symbol))\l<statTemp>$80: T.class_of(Sorbet::Private::Static) = alias <C Static>\lkeep_for_ide$82: T.class_of(T) = alias <C T>\l<statTemp>$81: T.class_of(T::Sig) = alias <C Sig>\l<statTemp>$79: Sorbet::Private::Static::Void = <statTemp>$80: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$81: T.class_of(T::Sig))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_20" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_21" [
        label = "block[id=21]()\louterLoops: 1\l<statTemp>$72: Integer(1) = 1\l<statTemp>$71: String = <statTemp>$72: Integer(1).to_s()\l<statTemp>$73: String(\"\") = \"\"\l<ifTemp>$70: T::Boolean = <statTemp>$71: String.==(<statTemp>$73: String(\"\"))\l<ifTemp>$70: T::Boolean\l"
    ];

    "bb::<Class:<root>>#<static-init>_21" -> "bb::<Class:<root>>#<static-init>_22" [style="bold"];
    "bb::<Class:<root>>#<static-init>_21" -> "bb::<Class:<root>>#<static-init>_18" [style="tapered"];

    "bb::<Class:<root>>#<static-init>_22" [
        label = "block[id=22]()\louterLoops: 1\l<returnTemp>$74: Symbol(:\"abc\") = :\"abc\"\l<block-break-assign>$75: Symbol(:\"abc\") = <returnTemp>$74\lc: Symbol(:\"abc\") = <block-break-assign>$75\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_22" -> "bb::<Class:<root>>#<static-init>_20" [style="bold"];
}

}

