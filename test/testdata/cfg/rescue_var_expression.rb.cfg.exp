digraph "rescue_var_expression.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_0" -> "bb::Object#foo_4" [style="tapered"];

    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_3" [
        label = "block[id=3](<returnMethodTemp>$2: NilClass)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$7: T.class_of(Exception) = alias <C Exception>\l<isaCheckTemp>$8: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$7: T.class_of(Exception))\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_3" -> "bb::Object#foo_9" [style="tapered"];

    "bb::Object#foo_4" [
        label = "block[id=4](<self>: Object)\l<statTemp>$5: String(\"boop\") = \"boop\"\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$5: String(\"boop\"))\l<rescueEndTemp>$6 = <unanalyzable>\l<rescueEndTemp>$6\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_4" -> "bb::Object#foo_6" [style="tapered"];

    "bb::Object#foo_6" [
        label = "block[id=6](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$13: NilClass)\l<gotoDeadTemp>$13\l"
    ];

    "bb::Object#foo_6" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_6" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_8" [
        label = "block[id=8](<rescueTemp>$2: Exception)\l<statTemp>$11: T.class_of(MyClass) = alias <C MyClass>\l<statTemp>$10: MyClass = <statTemp>$11: T.class_of(MyClass).new()\l<statTemp>$9: Exception = <statTemp>$10: MyClass.foo=(<rescueTemp>$2: Exception)\l<returnMethodTemp>$2: Integer(3) = 3\l<gotoDeadTemp>$13: NilClass\l"
    ];

    "bb::Object#foo_8" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_8" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_9" [
        label = "block[id=9](<returnMethodTemp>$2: NilClass)\l<gotoDeadTemp>$13: TrueClass(true) = true\l<gotoDeadTemp>$13: TrueClass(true)\l"
    ];

    "bb::Object#foo_9" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_9" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_10" [
        label = "block[id=10](<returnMethodTemp>$2: Integer(3))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)\l<unconditional>\l"
    ];

    "bb::Object#foo_10" -> "bb::Object#foo_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(MyClass) = alias <C MyClass>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(MyClass))\l<statTemp>$9: T.untyped = <self>: T.class_of(<root>).foo()\l<statTemp>$7: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$9: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::MyClass#foo=" {
    label = "::MyClass#foo=";
    color = blue;
    "bb::MyClass#foo=_0" [shape = invhouse];
    "bb::MyClass#foo=_1" [shape = parallelogram];

    "bb::MyClass#foo=_0" [
        label = "block[id=0]()\l<self>: MyClass = cast(<self>: NilClass, MyClass);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::MyClass#foo=_0" -> "bb::MyClass#foo=_1" [style="bold"];
    "bb::MyClass#foo=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::MyClass#foo=_1" -> "bb::MyClass#foo=_1" [style="bold"];
}

}

