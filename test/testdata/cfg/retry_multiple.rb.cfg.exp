digraph "retry_multiple.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;
    "bb::Object#main_0" [shape = invhouse];
    "bb::Object#main_1" [shape = parallelogram];

    "bb::Object#main_0" [
        label = "block[id=0]()\l<self>: Object = cast(<self>: NilClass, Object);\ltry: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_2" [
        label = "block[id=2](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<rescueStartTemp>$4: T.untyped = <unanalyzable>\l<rescueStartTemp>$4: T.untyped\l"
    ];

    "bb::Object#main_2" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_2" -> "bb::Object#main_4" [style="tapered"];

    "bb::Object#main_3" [
        label = "block[id=3](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$24: T.class_of(A) = alias <C A>\l<isaCheckTemp>$25: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$24: T.class_of(A))\l<isaCheckTemp>$25: T.untyped\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_14" [style="bold"];
    "bb::Object#main_3" -> "bb::Object#main_15" [style="tapered"];

    "bb::Object#main_4" [
        label = "block[id=4](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<statTemp>$7: Integer(3) = 3\l<ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))\l<ifTemp>$5: T::Boolean\l"
    ];

    "bb::Object#main_4" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_4" -> "bb::Object#main_6" [style="tapered"];

    "bb::Object#main_5" [
        label = "block[id=5](<self>: Object, try: Integer(0))\l<statTemp>$9: Integer(0) = try\l<statTemp>$10: Integer(1) = 1\ltry: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))\l<statTemp>$13: T.class_of(A) = alias <C A>\l<statTemp>$12: A = <statTemp>$13: T.class_of(A).new()\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: A)\l<unconditional>\l"
    ];

    "bb::Object#main_5" -> "bb::Object#main_13" [style="bold"];
    "bb::Object#main_6" [
        label = "block[id=6](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<statTemp>$16: Integer(6) = 6\l<ifTemp>$14: T::Boolean = try: Integer(0).<(<statTemp>$16: Integer(6))\l<ifTemp>$14: T::Boolean\l"
    ];

    "bb::Object#main_6" -> "bb::Object#main_7" [style="bold"];
    "bb::Object#main_6" -> "bb::Object#main_13" [style="tapered"];

    "bb::Object#main_7" [
        label = "block[id=7](<self>: Object, try: Integer(0))\l<statTemp>$18: Integer(0) = try\l<statTemp>$19: Integer(1) = 1\ltry: Integer = <statTemp>$18: Integer(0).+(<statTemp>$19: Integer(1))\l<statTemp>$22: T.class_of(B) = alias <C B>\l<statTemp>$21: B = <statTemp>$22: T.class_of(B).new()\l<returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$21: B)\l<unconditional>\l"
    ];

    "bb::Object#main_7" -> "bb::Object#main_13" [style="bold"];
    "bb::Object#main_12" [
        label = "block[id=12](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$36: NilClass)\l<gotoDeadTemp>$36: NilClass\l"
    ];

    "bb::Object#main_12" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_12" -> "bb::Object#main_18" [style="tapered"];

    "bb::Object#main_13" [
        label = "block[id=13](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<rescueEndTemp>$23: T.untyped = <unanalyzable>\l<rescueEndTemp>$23: T.untyped\l"
    ];

    "bb::Object#main_13" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_13" -> "bb::Object#main_12" [style="tapered"];

    "bb::Object#main_14" [
        label = "block[id=14](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<statTemp>$28: String(\"rescue A \") = \"rescue A \"\l<statTemp>$26: NilClass = <self>: Object.puts(<statTemp>$28: String(\"rescue A \"))\l<unconditional>\l"
    ];

    "bb::Object#main_14" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_15" [
        label = "block[id=15](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<rescueTemp>$3: T.untyped = <unanalyzable>\l<exceptionClassTemp>$30: T.class_of(B) = alias <C B>\l<isaCheckTemp>$31: T.untyped = <rescueTemp>$3: T.untyped.is_a?(<exceptionClassTemp>$30: T.class_of(B))\l<isaCheckTemp>$31: T.untyped\l"
    ];

    "bb::Object#main_15" -> "bb::Object#main_16" [style="bold"];
    "bb::Object#main_15" -> "bb::Object#main_17" [style="tapered"];

    "bb::Object#main_16" [
        label = "block[id=16](<returnMethodTemp>$2: NilClass, <self>: Object, try: Integer(0))\l<statTemp>$34: String(\"rescue B \") = \"rescue B \"\l<statTemp>$32: NilClass = <self>: Object.puts(<statTemp>$34: String(\"rescue B \"))\l<unconditional>\l"
    ];

    "bb::Object#main_16" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_17" [
        label = "block[id=17](<returnMethodTemp>$2: NilClass)\l<gotoDeadTemp>$36: TrueClass(true) = true\l<gotoDeadTemp>$36: TrueClass(true)\l"
    ];

    "bb::Object#main_17" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_17" -> "bb::Object#main_18" [style="tapered"];

    "bb::Object#main_18" [
        label = "block[id=18](<returnMethodTemp>$2: NilClass)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#main_18" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: T.class_of(A) = alias <C A>\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$6: T.class_of(A))\l<statTemp>$8: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$9: T.class_of(Exception) = alias <C Exception>\l<statTemp>$7: Sorbet::Private::Static::Void = <statTemp>$8: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$9: T.class_of(Exception))\l<statTemp>$12: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: T.class_of(B) = alias <C B>\l<statTemp>$11: Sorbet::Private::Static::Void = <statTemp>$12: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$13: T.class_of(B))\l<statTemp>$15: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$16: T.class_of(Exception) = alias <C Exception>\l<statTemp>$14: Sorbet::Private::Static::Void = <statTemp>$15: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$16: T.class_of(Exception))\l<statTemp>$17: T.untyped = <self>: T.class_of(<root>).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

