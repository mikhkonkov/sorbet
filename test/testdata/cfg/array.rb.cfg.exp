digraph "array.rb" {
subgraph "cluster_::TestArray#an_int" {
    label = "::TestArray#an_int";
    color = blue;
    "bb::TestArray#an_int_0" [shape = invhouse];
    "bb::TestArray#an_int_1" [shape = parallelogram];

    "bb::TestArray#an_int_0" [
        label = "block[id=0]()\l<self>: TestArray = cast(<self>: NilClass, TestArray);\l<returnMethodTemp>$2: Integer(0) = 0\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_0" -> "bb::TestArray#an_int_1" [style="bold"];
    "bb::TestArray#an_int_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_1" -> "bb::TestArray#an_int_1" [style="bold"];
}

subgraph "cluster_::TestArray#a_string" {
    label = "::TestArray#a_string";
    color = blue;
    "bb::TestArray#a_string_0" [shape = invhouse];
    "bb::TestArray#a_string_1" [shape = parallelogram];

    "bb::TestArray#a_string_0" [
        label = "block[id=0]()\l<self>: TestArray = cast(<self>: NilClass, TestArray);\l<returnMethodTemp>$2: String(\"str\") = \"str\"\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String(\"str\")\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_0" -> "bb::TestArray#a_string_1" [style="bold"];
    "bb::TestArray#a_string_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_1" -> "bb::TestArray#a_string_1" [style="bold"];
}

subgraph "cluster_::TestArray#test_arrays" {
    label = "::TestArray#test_arrays";
    color = blue;
    "bb::TestArray#test_arrays_0" [shape = invhouse];
    "bb::TestArray#test_arrays_1" [shape = parallelogram];

    "bb::TestArray#test_arrays_0" [
        label = "block[id=0]()\l<self>: TestArray = cast(<self>: NilClass, TestArray);\l<magic>$4: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$3: T::Array[T.untyped] = <magic>$4: T.class_of(<Magic>).<build-array>()\l<arrayTemp>$6: Integer(1) = 1\l<arrayTemp>$7: Integer(2) = 2\l<magic>$8: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$5: [Integer(1), Integer(2)] = <magic>$8: T.class_of(<Magic>).<build-array>(<arrayTemp>$6: Integer(1), <arrayTemp>$7: Integer(2))\l<arrayTemp>$9: Integer = <self>: TestArray.an_int()\l<arrayTemp>$11: String = <self>: TestArray.a_string()\l<magic>$14: T.class_of(<Magic>) = alias <C <Magic>>\l<arrayTemp>$13: T::Array[T.untyped] = <magic>$14: T.class_of(<Magic>).<build-array>()\l<magic>$15: T.class_of(<Magic>) = alias <C <Magic>>\l<returnMethodTemp>$2: [Integer, String, T::Array[T.untyped]] = <magic>$15: T.class_of(<Magic>).<build-array>(<arrayTemp>$9: Integer, <arrayTemp>$11: String, <arrayTemp>$13: T::Array[T.untyped])\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: [Integer, String, T::Array[T.untyped]]\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_0" -> "bb::TestArray#test_arrays_1" [style="bold"];
    "bb::TestArray#test_arrays_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_1" -> "bb::TestArray#test_arrays_1" [style="bold"];
}

subgraph "cluster_::<Class:TestArray>#<static-init>" {
    label = "::<Class:TestArray>#<static-init>";
    color = blue;
    "bb::<Class:TestArray>#<static-init>_0" [shape = invhouse];
    "bb::<Class:TestArray>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:TestArray>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(TestArray) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U TestArray>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U TestArray>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: T.class_of(TestArray).sig()\l<selfRestore>$6: T.class_of(TestArray) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_0" -> "bb::<Class:TestArray>#<static-init>_2" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_1" -> "bb::<Class:TestArray>#<static-init>_1" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_2" [
        label = "block[id=2](<self>: T.class_of(TestArray), <selfRestore>$6: T.class_of(TestArray))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:TestArray>#<static-init>_2" -> "bb::<Class:TestArray>#<static-init>_5" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_2" -> "bb::<Class:TestArray>#<static-init>_3" [style="tapered"];

    "bb::<Class:TestArray>#<static-init>_3" [
        label = "block[id=3](<selfRestore>$6: T.class_of(TestArray))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<sig>\l<self>: T.class_of(TestArray) = <selfRestore>$6\l<block-pre-call-temp>$15: Sorbet::Private::Static::Void = <self>: T.class_of(TestArray).sig()\l<selfRestore>$16: T.class_of(TestArray) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_3" -> "bb::<Class:TestArray>#<static-init>_6" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_5" [
        label = "block[id=5](<self>: T.class_of(TestArray), <selfRestore>$6: T.class_of(TestArray))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<statTemp>$11: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$9: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$11: T.class_of(Integer))\l<blockReturnTemp>$12: T.noreturn = blockreturn<sig> <blockReturnTemp>$9: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_5" -> "bb::<Class:TestArray>#<static-init>_2" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_6" [
        label = "block[id=6](<self>: T.class_of(TestArray), <selfRestore>$16: T.class_of(TestArray))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:TestArray>#<static-init>_6" -> "bb::<Class:TestArray>#<static-init>_9" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_6" -> "bb::<Class:TestArray>#<static-init>_7" [style="tapered"];

    "bb::<Class:TestArray>#<static-init>_7" [
        label = "block[id=7](<selfRestore>$16: T.class_of(TestArray))\l<statTemp>$13: Sorbet::Private::Static::Void = Solve<sig>\l<statTemp>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>\lkeep_for_ide$26: T.class_of(T) = alias <C T>\l<statTemp>$25: T.class_of(T::Sig) = alias <C Sig>\l<statTemp>$23: Sorbet::Private::Static::Void = <statTemp>$24: T.class_of(Sorbet::Private::Static).keep_for_ide(<statTemp>$25: T.class_of(T::Sig))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_7" -> "bb::<Class:TestArray>#<static-init>_1" [style="bold"];
    "bb::<Class:TestArray>#<static-init>_9" [
        label = "block[id=9](<self>: T.class_of(TestArray), <selfRestore>$16: T.class_of(TestArray))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<statTemp>$21: T.class_of(String) = alias <C String>\l<blockReturnTemp>$19: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$21: T.class_of(String))\l<blockReturnTemp>$22: T.noreturn = blockreturn<sig> <blockReturnTemp>$19: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:TestArray>#<static-init>_9" -> "bb::<Class:TestArray>#<static-init>_6" [style="bold"];
}

}

